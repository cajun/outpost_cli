#!/usr/bin/env ruby
#
# This file was generated by Bundler.
#
# The application 'outpost_cli' is installed as part of a gem, and
# this file is here to facilitate running it.
#

#require 'pathname'
#ENV['BUNDLE_GEMFILE'] ||= File.expand_path("../../Gemfile",
  #Pathname.new(__FILE__).realpath)

require 'rubygems'
require 'bundler/setup'

#load Gem.bin_path('outpost_cli', 'outpost_cli')


require "ncurses"


class Window
  attr_accessor :height, :width, :x, :y

  def initialize opts = {}
    opts = defaults.merge opts

    @height = opts[:height]
    @width  = opts[:width]
    @x      = opts[:x]
    @y      = opts[:y]
  end

  def defaults
    {
      height:  Ncurses.LINES() - 1,
      width:   Ncurses.COLS() - 1,
      x:       1,
      y:       1
    }
  end

  def rec
    [ height, width, y, x ]
  end

  def curses
    @win ||= Ncurses::WINDOW.new(*rec)
  end

end

class Title < Window
  def initialize opts = {}
    super opts
    @height = 3
  end
end

class Log < Window
end

class Board < Window
end

class Console < Window
  def initialize opts = {}
    super opts
    @height = 3
  end
end

def two_borders()
  # make a new window as tall as the screen and half as wide, in the left half
  # of the screen
  title_obj   = Title.new
  board_obj   = Board.new
  log_obj     = Log.new
  console_obj = Console.new

  board_obj.height = board_obj.height - ((title_obj.height + console_obj.height) + 4)
  log_obj.height   = board_obj.height

  board_obj.y = title_obj.height + 1
  log_obj.y   = board_obj.y

  log_obj.width = (board_obj.width / 3)
  board_obj.width   = (board_obj.width - log_obj.width) - 2
  log_obj.x       = board_obj.width + 1

  console_obj.y = board_obj.height + title_obj.height + console_obj.height - 1


  title   = title_obj.curses
  left    = board_obj.curses
  right   = log_obj.curses
  console = console_obj.curses

  title.border(*([0]*8))
  title.addstr("title panel")


  left.border(*([0]*8))
  left.addstr("chess board")

  adj = board_obj.height / 8
  8.times do |line|
    left.move(2 + (line * adj) , 0)
    left.hline('-'.to_c, board_obj.width)
    left.addstr(line.to_s)
  end

  adj = board_obj.width / 8
  8.times do |line|
    left.move(2, line * adj)
    left.vline('|'.to_c, board_obj.height)
    left.addstr(line.to_s)
  end

  right.border(*([0]*8))
  right.addstr("right panel")

  console.border(*([0]*8))
  console.addstr("console")

  title.noutrefresh() # copy window to virtual screen, don't update real screen
  left.noutrefresh()
  right.noutrefresh()
  console.noutrefresh()
  Ncurses.doupdate() # update read screen
  title.getch()
end

begin
  # initialize ncurses
  Ncurses.initscr
  Ncurses.cbreak           # provide unbuffered input
  Ncurses.noecho           # turn off input echoing
  Ncurses.nonl             # turn off newline translation
  Ncurses.stdscr.intrflush(false) # turn off flush-on-interrupt
  Ncurses.stdscr.keypad(true)     # turn on keypad mode

  two_borders()          # demo of two windows with borders

ensure
  Ncurses.echo
  Ncurses.nocbreak
  Ncurses.nl
  Ncurses.endwin
end
