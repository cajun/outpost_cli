#!/usr/bin/env ruby
#
# This file was generated by Bundler.
#
# The application 'outpost_cli' is installed as part of a gem, and
# this file is here to facilitate running it.
#

#require 'pathname'
#ENV['BUNDLE_GEMFILE'] ||= File.expand_path("../../Gemfile",
  #Pathname.new(__FILE__).realpath)

require 'rubygems'
require 'bundler/setup'

#load Gem.bin_path('outpost_cli', 'outpost_cli')


require "ncurses"

offset_height = 1
offset_width  = 1

console_height = title_height
console_width  = title_witht

board_width   = (Ncurses.COLS() * (2/3)).to_i
board_height  = (Ncurses.LINES() * (2/3)).to_i

log_width  = Ncurses.COLS() - board_width
log_height = board_height

def offset_rec
 [ 1,1,0,0 ]
end

def title_window
 rec = [ 3, Ncurses.LINES(), 0, 0 ]
 Ncurses::WINDOW.new( *rec )
end

def board_window
 rec = [ Ncurses.LINES() - , Ncurses.LINES(), 0, 0 ]
 Ncurses::WINDOW.new( *rec )
end


def two_borders()
  # make a new window as tall as the screen and half as wide, in the left half
  # of the screen
  title = title_window

  left  = Ncurses::WINDOW.new(Ncurses.LINES() - 8, (Ncurses.COLS() / 2 ), 4, 0)
  right = Ncurses::WINDOW.new(Ncurses.LINES() - 8, (Ncurses.COLS() - Ncurses.COLS()  / 2 ), 4, (Ncurses.COLS() / 2 ))
  console = Ncurses::WINDOW.new(3, Ncurses.COLS(), (Ncurses.LINES() - 4), 0)

  title.border(*([0]*8))
  title.addstr("title panel")


  left.border(*([0]*8))
  left.addstr("chess board")
  left.move(3, 0)

  8.times do |line|
    left.move(line * 3, 0)
    left.hline('-'.to_c, (Ncurses.COLS() / 2))
    left.vline('|'.to_c, (Ncurses.LINES() - 4))
  end

  8.times do |line|
    left.move(3, line * 3)
    left.vline('|'.to_c, (Ncurses.LINES() - 4))
  end

  right.border(*([0]*8))
  right.addstr("right panel")

  console.border(*([0]*8))
  console.addstr("console")

  title.noutrefresh() # copy window to virtual screen, don't update real screen
  left.noutrefresh()
  right.noutrefresh()
  console.noutrefresh()
  Ncurses.doupdate() # update read screen
  title.getch()
end

begin
  # initialize ncurses
  Ncurses.initscr
  Ncurses.cbreak           # provide unbuffered input
  Ncurses.noecho           # turn off input echoing
  Ncurses.nonl             # turn off newline translation
  Ncurses.stdscr.intrflush(false) # turn off flush-on-interrupt
  Ncurses.stdscr.keypad(true)     # turn on keypad mode

  two_borders()          # demo of two windows with borders

ensure
  Ncurses.echo
  Ncurses.nocbreak
  Ncurses.nl
  Ncurses.endwin
end
