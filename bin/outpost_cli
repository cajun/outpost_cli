#!/usr/bin/env ruby
#
# This file was generated by Bundler.
#
# The application 'outpost_cli' is installed as part of a gem, and
# this file is here to facilitate running it.
#

#require 'pathname'
#ENV['BUNDLE_GEMFILE'] ||= File.expand_path("../../Gemfile",
  #Pathname.new(__FILE__).realpath)

require 'rubygems'
#require 'bundler/setup'

#load Gem.bin_path('outpost_cli', 'outpost_cli')

require "curses"

class Game
  def board
    'hiya'
  end

  def move x,y
  end

  def ai_move
  end

  def set
  end

  def draw?
    true
  end

  def player
    'x'
  end

  def winner
   'o'
  end
end


STATUS_LINE = 10
STATUS_LINE_LENGTH = 23

def init_screen
  Curses.noecho # do not show typed keys
  Curses.init_screen
  Curses.stdscr.keypad(true) # enable arrow keys
  begin
    yield
  ensure
    Curses.close_screen
  end
end

def write(line, column, text)
  Curses.setpos(line, column)
  Curses.addstr(text);
end

def draw_board
  width = Curses.cols / 3
  height = Curses.lines - 20

  8.times do |col|
    8.times do |row|
      square col , row, width, height
    end
  end

end

def square x,y, total_width, total_height
  width = total_width / 8
  height = total_height / 8
  win = Curses::Window.new height,width,y * height, (x * width) + total_width
  win.box("|", "-")

  win.color_set Curses::COLOR_BLUE
  win.noutrefresh
  win.close
end

def display(ttt)
  draw_board

  if winner = ttt.winner
    status("Player #{winner} has won!!!!")
  elsif ttt.draw?
    status("It is a draw...")
  else
    status("It is #{ttt.player}`s turn...")
  end
end

def status(message)
  # pad the status with spaces to replace old characters
  message += " " * (STATUS_LINE_LENGTH - message.length)
  write(STATUS_LINE, 0, message)
end

init_screen do
  ttt = Game.new

  write(STATUS_LINE+1, 0, "q=Quit r=Reset a=AI-move")

  loop do
    display ttt

    case Curses.getch
    when Curses::Key::UP then ttt.move(0,-1)
    when Curses::Key::DOWN then ttt.move(0,1)
    when Curses::Key::RIGHT then ttt.move(1,0)
    when Curses::Key::LEFT then ttt.move(-1,0)
    when ?a then ttt.ai_move
    when 10 then ttt.set # enter
    when ?q then break
    when ?r then ttt = Game.new
    end
  end
end


